;;; Compiled snippets and support files for `ess-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'ess-mode
				 '(("write_csv" "write.csv($1, '$2', row.names = FALSE)$0" "write_csv" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/write_csv.yasnippet" nil nil)
				   ("setwd" "setwd(\"${1:`(abbreviate-file-name (file-name-directory (buffer-file-name)))`}\")\n$0" "setwd" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/setwd.yasnippet" nil nil)
				   (";plot" "qplot(data = ${1:data},\n      x = ${2:date},\n      y = ${3:y},\n      geom = ${4:\"line\"})\n$0" "plot" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/plot.yasnippet" nil nil)
				   (";if" "if(${1:CONDITION}) {\n  $0\n}\nelse {\n  \n}" "if" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/if.yasnippet" nil nil)
				   ("header" "#############################################################################\n## `(upcase (file-name-nondirectory (buffer-file-name)))`\n#############################################################################\n##   ${1:Simple description}\n##\n##	AUTHOR:		`user-full-name`\n##	CREATED:		`(format-time-string \"%Y-%m-%d\")`\n##	MODIFIED:		`(format-time-string \"%Y-%m-%d\")`\n##\n#############################################################################\n## SUMMARY:\n#############################################################################\n##   ${3:Details}\n##\n#############################################################################\n## REVISIONS:\n#############################################################################\n##   1) <NONE>\n##\n#############################################################################\n## TO DO:\n#############################################################################\n##   - ${4:<NONE>}\n##\n#############################################################################\n## INPUT:\n#############################################################################\n##   PACKAGES / SCRIPTS:\n##   - ${5:<NONE>}\n##\n##   DATA:\n##   - ${6:<NONE>}\n##\n#############################################################################\n## OUTPUT:\n#############################################################################\n##   DATA:\n##   - ${7:<NONE>}\n##\n##   PLOTS:\n##   - ${8:<NONE>}\n##\n#############################################################################\n\nsetwd(\"`(abbreviate-file-name (file-name-directory (buffer-file-name)))`\")\n\n$0" "header" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/header.yasnippet" nil nil)
				   ("getwd" "getwd()\n$0\n" "getwd" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/getwd.yasnippet" nil nil)
				   ("func" "${1:function_name} <- function(${2:parameters}) {\n  `(concat\n   \"## \"\n   (make-string (- 79 (current-column)\n			  (* 4 (length comment-start)) 2) (string-to-char \"#\"))\n   \" ##\")`\n  ## ${1:$(upcase yas-text)}(${2:$(upcase yas-text)})\n  ## ${3:SUMMARY OF FUNCTION}\n  ##\n  ## PARAMETERS:\n  ##   - ${2:$(if yas-text\n    (concat (replace-regexp-in-string\n		   \",\"\n		   \" (TYPE):\\n  ##     DESCRIPTION\\n  ##   -\"\n		   yas-text)\n		  \" (TYPE):\\n  ##     DESCRIPTION\\n  ##\")\n  \"<none>\")} \n  ##\n  ## OUTPUT:\n  ##   - ${5:NULL}\n  ##\n  `(concat\n   \"## \"\n   (make-string (- 79 (current-column)\n			  (* 4 (length comment-start)) 2) (string-to-char \"#\"))\n   \" ##\")`\n  $0\n  return($5)\n}" "function" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/function.yasnippet" nil nil)
				   ("fetch_oracle" "con <- do.call(dbConnect, c(dbDriver(\"Oracle\"), settings$db$oracle${1:_edw}))\n${2:data} <- dbReadTable(con, \"${3:TABLE$(upcase yas-text)}\")\ndbDisconnect(con)\n$2 <- $2 %>%\n  rename_all(tolower) %>%\n  mutate_if(is.POSIXct, as.Date)\nnrow($2)\n\n$0" "fetch_oracle" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/fetch_oracle.yasnippet" nil nil)
				   ("fetch_odbc" "con <- odbcConnect(settings$db$${1:edw})\n${2:data} <- sqlFetch(con, \"${3:TABLE$(upcase yas-text)}\")\nclose(con)\n$2 <- $2 %>%\n  rename_all(tolower) %>%\n  mutate_if(is.POSIXct, as.Date)\nnrow($2)\n\n$0" "fetch_odbc" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/fetch_odbc.yasnippet" nil nil)
				   ("date" "as.Date('${1:YYYY}-${2:MM}-${3:DD}')$0" "date" nil nil nil "c:/Users/hilbertjp2/.emacs.d/snippets/ess-mode/date.yasnippet" nil nil)))


;;; Do not edit! File generated at Wed Apr 14 16:24:50 2021
